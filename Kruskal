#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

// Создание ярлыка для целочисленной пары
typedef pair<int, int> iPair;

// Структура для представления графика
struct Graph
{
    int V, E;
    vector< pair<int, iPair> > edges;

    // Конструктор
    Graph(int V, int E)
    {
        this->V = V;
        this->E = E;
    }

    // Вспомогательная функция для добавления края
    void addEdge(int u, int v, int w)
    {
        edges.push_back({ w, {u, v} });
    }

    // Функция поиска MST с помощью Крускала
    // MST алгоритм
    int kruskalMST();
};

// Для представления непересекающихся множеств
struct DisjointSets
{
    int* parent, * rnk;
    int n;

    // Конструктор.
    DisjointSets(int n)
    {
        // Выделение памяти
        this->n = n;
        parent = new int[n + 1];
        rnk = new int[n + 1];

        // Изначально все вершины находятся в разных множествах и имеют ранг 0.
        for (int i = 0; i <= n; i++)
        {
            rnk[i] = 0;

            //каждый элемент является родителем самого себя
            parent[i] = i;
        }
    }

    // Нахождение родителя узла 'u' Сжатие пути
    int find(int u)
    {
        /* Сделать родителя узлов на пути от u--> 
        parent[u] указывающим на parent[u] */
        if (u != parent[u])
            parent[u] = find(parent[u]);
        return parent[u];
    }

    // Союз по рангу
    void merge(int x, int y)
    {
        x = find(x), y = find(y);

        /* Сделать дерево меньшей высоты поддеревом другого дерева */
        if (rnk[x] > rnk[y])
            parent[y] = x;
        else // Если rnk[x] <= rnk[y]
            parent[x] = y;

        if (rnk[x] == rnk[y])
            rnk[y]++;
    }
};

/* Функции возвращают вес MST*/

int Graph::kruskalMST()
{
    int mst_wt = 0; // Инициализировать результат

    // Сортировать ребра в порядке возрастания на основе стоимости
    sort(edges.begin(), edges.end());

    // Создание непересекающихся наборов
    DisjointSets ds(V);

    // Итерация по всем отсортированным ребрам
    vector< pair<int, iPair> >::iterator it;
    for (it = edges.begin(); it != edges.end(); it++)
    {
        int u = it->second.first;
        int v = it->second.second;

        int set_u = ds.find(u);
        int set_v = ds.find(v);

        // Проверка на создание данным ребром цикла
        //(цикл создается, если u и v принадлежат одному и тому же набору)
        if (set_u != set_v)
        {
            // распечатка текущего ребра из MST
            cout << u << " - " << v << endl;

            // Обновить вес MST
            mst_wt += it->first;

            // Объединить два набора
            ds.merge(set_u, set_v);
        }
    }

    return mst_wt;
}

int main()
{
    setlocale(LC_ALL, "RU");

    int V = 9, E = 14;
    Graph g(V, E);

    g.addEdge(0, 1, 4);
    g.addEdge(0, 7, 8);
    g.addEdge(1, 2, 8);
    g.addEdge(1, 7, 11);
    g.addEdge(2, 3, 7);
    g.addEdge(2, 8, 2);
    g.addEdge(2, 5, 4);
    g.addEdge(3, 4, 9);
    g.addEdge(3, 5, 14);
    g.addEdge(4, 5, 10);
    g.addEdge(5, 6, 2);
    g.addEdge(6, 7, 1);
    g.addEdge(6, 8, 6);
    g.addEdge(7, 8, 7);

    cout << "Края MST \n";
    int mst_wt = g.kruskalMST();

    cout << "\nВес MST составляет " << mst_wt;

    return 0;
}
